// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: filetransfer.proto

package go_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTransferClient is the client API for FileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (FileTransfer_SendFileClient, error)
}

type fileTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferClient(cc grpc.ClientConnInterface) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (FileTransfer_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransfer_ServiceDesc.Streams[0], "/filestream.FileTransfer/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferSendFileClient{stream}
	return x, nil
}

type FileTransfer_SendFileClient interface {
	Send(*SendFileRequest) error
	CloseAndRecv() (*SendStatus, error)
	grpc.ClientStream
}

type fileTransferSendFileClient struct {
	grpc.ClientStream
}

func (x *fileTransferSendFileClient) Send(m *SendFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferSendFileClient) CloseAndRecv() (*SendStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServer is the server API for FileTransfer service.
// All implementations must embed UnimplementedFileTransferServer
// for forward compatibility
type FileTransferServer interface {
	SendFile(FileTransfer_SendFileServer) error
	mustEmbedUnimplementedFileTransferServer()
}

// UnimplementedFileTransferServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServer struct {
}

func (UnimplementedFileTransferServer) SendFile(FileTransfer_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileTransferServer) mustEmbedUnimplementedFileTransferServer() {}

// UnsafeFileTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServer will
// result in compilation errors.
type UnsafeFileTransferServer interface {
	mustEmbedUnimplementedFileTransferServer()
}

func RegisterFileTransferServer(s grpc.ServiceRegistrar, srv FileTransferServer) {
	s.RegisterService(&FileTransfer_ServiceDesc, srv)
}

func _FileTransfer_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServer).SendFile(&fileTransferSendFileServer{stream})
}

type FileTransfer_SendFileServer interface {
	SendAndClose(*SendStatus) error
	Recv() (*SendFileRequest, error)
	grpc.ServerStream
}

type fileTransferSendFileServer struct {
	grpc.ServerStream
}

func (x *fileTransferSendFileServer) SendAndClose(m *SendStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferSendFileServer) Recv() (*SendFileRequest, error) {
	m := new(SendFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransfer_ServiceDesc is the grpc.ServiceDesc for FileTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filestream.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _FileTransfer_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filetransfer.proto",
}
