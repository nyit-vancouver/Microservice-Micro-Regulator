@page "/sigma-rule"
@using Grpc.Net.Client;
@using YamlDotNet.Serialization
@using YamlDotNet.Serialization.NamingConventions
@using MicroArcSec.Client.Data;
@using System.IO
@using System.Net.Http
@using System.Threading.Tasks

@inject NavigationManager Navigation

<div class="bg-gray-100 p-4 rounded-lg shadow-md container">
    @if (rules is null || !rules.Any())
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var rule in rules)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@rule.title</h5>
                    <p class="card-text">@rule.description</p>
                    <p class="card-text badge bg-warning"><small class="text-muted">@rule.status | @rule.detection.level</small></p>
                    <button class="btn btn-primary custom-button" @onclick="@(() => ViewDetails(rule))">View Details</button>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public SigmaRuleModel[] rules { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var yaml = await File.ReadAllTextAsync("H:\\sample.yaml");
        var deserializer = new DeserializerBuilder()
            .WithNamingConvention(UnderscoredNamingConvention.Instance)
            .Build();
        try
        {
            rules = deserializer.Deserialize<SigmaRuleModel[]>(yaml);
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private void ViewDetails(SigmaRuleModel rule)
    {
        Navigation.NavigateTo($"/sigmaruledetails/{rule.id}", true);
    }

    //private async Task FetchFilesFromGRPC()
    //{
    //    using var channel = GrpcChannel.ForAddress("https://localhost:5001");
    //    var client = new FileTransfer.FileTransferClient(channel);
    //    var request = new FileRequest { FilePath = filePath };
    //    var response = await client.GetFileAsync(request);
    //    return response.FileContent.ToByteArray();
    //}
}
