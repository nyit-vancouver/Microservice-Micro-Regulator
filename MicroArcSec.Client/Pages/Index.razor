@page "/"
@using MicroArcSec.Client.Classes;
@using Microsoft.AspNetCore.SignalR.Client;
@using MicroArcSec.Client.Data;
@using System.Net.Http
@using System.Threading.Tasks

@inject NavigationManager Navigation
@inject HubConnection HubConnection

<h3>SIGMA Rules TOP 5</h3>
<div class="bg-gray-100 p-4 rounded-lg shadow-md container">
    @if (rules is null || !rules.Any())
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var rule in rules)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@rule.title</h5>
                    <p class="card-text">@rule.description</p>
                    <p><i class="fas fa-clock"></i> @rule.date?.ToString("yyyy/MM/dd hh:mm:ss")</p>
                    <p class="card-text badge @(rule.detection.level.Equals("high", StringComparison.CurrentCultureIgnoreCase) ? "bg-danger" : "bg-warning")"><small class="text-muted">@rule.status | @rule.detection.level</small></p>
                    <button class="btn btn-primary custom-button center-button" @onclick="@(() => ViewDetails(rule))">View Details</button>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public List<SigmaRuleModel> rules { get; set; }

    private async Task LoadData()
    {
        rules = await Tools.GetAllRules();
        rules = rules.Skip(0).Take(5).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/FileReceiverHub"))
            .Build();
        HubConnection.On<string>("ReceiveFile", OnReceiveMessage);
        await HubConnection.StartAsync();

        await LoadData();
    }

    private async Task OnReceiveMessage(string fileName)
    {
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }

    private void ViewDetails(SigmaRuleModel rule)
    {
        Navigation.NavigateTo($"/sigmaruledetails/{rule.fileName}", true);        
    }

    public async ValueTask DisposeAsync()
    {
        await HubConnection.DisposeAsync();
    }    
}
