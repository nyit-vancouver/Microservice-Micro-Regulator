@page "/"
@using MicroArcSec.Client.Services;
@using YamlDotNet.Serialization
@using YamlDotNet.Serialization.NamingConventions
@using MicroArcSec.Client.Data;
@using System.IO
@using System.Net.Http
@using System.Threading.Tasks

@inject NavigationManager Navigation

<h3>SIGMA Rules</h3>
<div class="bg-gray-100 p-4 rounded-lg shadow-md container">
    @if (rules is null || !rules.Any())
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var rule in rules)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@rule.title</h5>
                    <p class="card-text">@rule.description</p>
                    <p class="card-text badge @(rule.detection.level.Equals("high", StringComparison.CurrentCultureIgnoreCase) ? "bg-danger" : "bg-warning")"><small class="text-muted">@rule.status | @rule.detection.level</small></p>
                    <button class="btn btn-primary custom-button center-button" @onclick="@(() => ViewDetails(rule))">View Details</button>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public List<SigmaRuleModel> rules { get; set; }

    protected override async Task OnInitializedAsync()
    {
        rules = new List<SigmaRuleModel>();

        // specify the directory path
        string directoryPath = @".\Files\";

        // get all the files in the directory
        string[] fileEntries = Directory.GetFiles(directoryPath);

        foreach (string fileName in fileEntries)
        {
            var yaml = await File.ReadAllTextAsync(fileName);
            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(UnderscoredNamingConvention.Instance)
                .Build();
            try
            {
                var rule = deserializer.Deserialize<SigmaRuleModel>(yaml);
                rule.fileName = fileName.Replace(".\\Files\\", "").Replace(".yaml", "");
                rules.Add(rule);
            }
            catch (Exception ex)
            {

                throw;
            }
        }
    }

    private void ViewDetails(SigmaRuleModel rule)
    {
        Navigation.NavigateTo($"/sigmaruledetails/{rule.fileName}", true);
    }
}
