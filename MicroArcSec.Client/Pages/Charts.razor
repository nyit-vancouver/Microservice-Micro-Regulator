@page "/charts"
@using MicroArcSec.Client.Classes;
@using Microsoft.AspNetCore.SignalR.Client;

@inject NavigationManager Navigation
@inject HubConnection HubConnection



<h1>Charts</h1>

@if (statusData is null || !statusData.Any())
{
    <p>Loading...</p>
}
else
{
    <GridRow>
        <GridCol Span="8">
            <RadzenChart>
                <RadzenDonutSeries Title="Status" Data="@statusData" CategoryProperty="Type" ValueProperty="Value">
                    <ChildContent>
                        <RadzenSeriesDataLabels Visible="true" />
                    </ChildContent>
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Status</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>            
        </GridCol>
        <GridCol Span="8">
            <RadzenChart>
                <RadzenDonutSeries Title="Level" Data="@levelData" CategoryProperty="Type" ValueProperty="Value">
                    <ChildContent>
                        <RadzenSeriesDataLabels Visible="true" />
                    </ChildContent>
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Level</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </GridCol>
    </GridRow>
     <GridRow>
        <GridCol Span="8">
            <RadzenChart>
                <RadzenColumnSeries Title="Logs per day" Data="@logsPerDayData" CategoryProperty="Type" ValueProperty="Value" />
                <RadzenValueAxis Min="0" Max="5" Step="1" />
            </RadzenChart>
        </GridCol>
    </GridRow>
}


@code {
    public class DataItem
    {
        public string? Type { get; set; }
        public double? Value { get; set; }
        public DateTime? Date { get; set; }
    }

    [Parameter]
    public DataItem[] statusData { get; set; }

    [Parameter]
    public DataItem[] levelData { get; set; }

    [Parameter]
    public DataItem[] logsPerDayData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/FileReceiverHub"))
            .Build();
        HubConnection.On<string>("ReceiveFile", OnReceiveMessage);
        await HubConnection.StartAsync();

        await LoadData();

        await base.OnInitializedAsync();

    }

    private async Task LoadData()
    {
        var rules = await Tools.GetAllRules();

        statusData = rules.GroupBy(x => x.status)
                .Select(g => new DataItem { Type = g.Key, Value = g.Count() }).ToArray();

        levelData = rules.GroupBy(x => x.detection.level)
                .Select(g => new DataItem{ Type = g.Key, Value = g.Count() }).ToArray();

        logsPerDayData = rules.Where(x => x.date.HasValue)
              .GroupBy(x => x.date.Value.Date)
              .Select(g => new DataItem { Type = g.Key.ToString("MMMM dd"), Value = g.Count(), Date = g.Key })
              .OrderBy(x => x.Date).ToArray();
    }

    private async Task OnReceiveMessage(string fileName)
    {
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }
}
